import type { Transaction, WrappedFunction } from '@sentry/types';
import type { NextApiRequest, NextApiResponse } from 'next';
export type NextApiHandler = {
    (req: NextApiRequest, res: NextApiResponse): void | Promise<void> | unknown | Promise<unknown>;
    __sentry_route__?: string;
    /**
     * A property we set in our integration tests to simulate running an API route on platforms that don't support streaming.
     */
    __sentry_test_doesnt_support_streaming__?: true;
};
export type WrappedNextApiHandler = {
    (req: NextApiRequest, res: NextApiResponse): Promise<void> | Promise<unknown>;
    __sentry_route__?: string;
    __sentry_wrapped__?: boolean;
};
export type AugmentedNextApiRequest = NextApiRequest & {
    __withSentry_applied__?: boolean;
};
export type AugmentedNextApiResponse = NextApiResponse & {
    __sentryTransaction?: Transaction;
};
export type ResponseEndMethod = AugmentedNextApiResponse['end'];
export type WrappedResponseEndMethod = AugmentedNextApiResponse['end'] & WrappedFunction;
//# sourceMappingURL=types.d.ts.map